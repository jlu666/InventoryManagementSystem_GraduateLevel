package datasource;
import java.sql.*;
import java.util.ArrayList;

import DBCreation.CreationString;
/**
 * All the database calls are contained in here.
 * @author Ronald Sease & Darnell Martin
 *
 */
public class DatabaseGateway 
{
	
	/**
	 * Connection to database
	 */
	public static Connection conn;
	
	/**
	 * Gets a connection to the database
	 * @return conn - connection to databases
	 * @throws SQLException 
	 */
	public static Connection getConnection() throws SQLException
	{
		if(conn == null)
		{
			conn = DriverManager.getConnection("jdbc:mysql://db.cs.ship.edu/swe400-11?useSSL=false",
				        "swe400_1","pwd4swe400_1F16");
		}
		else
		{
			return conn;
		}
		return conn;
	}
	
	/**
	 * Sets autocommit to false in order to start a Transaction
	 * @throws SQLException
	 */
	public static void setTransaction() throws SQLException
	{
		conn.setAutoCommit(false);
	}
	
	/**
	 * Rollsback all changes that occurred to the database that weren't yet committed
	 * @throws SQLException
	 */
	public static void rollbackTransaction() throws SQLException
	{
		conn.rollback();
	}
	
	/**
	 * Resets the AutoIncrement field on the KeyTable
	 * @throws SQLException
	 */
	public static void resetAutoIncrement() throws SQLException
	{
		Connection DBConnection = getConnection();
		PreparedStatement st = null;
		st = DBConnection.prepareStatement("ALTER TABLE KeyTable AUTO_INCREMENT = 1");
		st.execute();
	}
	
	/**
	 * Drops and recreates the PowerToolsTOStripNails table
	 * @throws SQLException
	 */
	public static void dropAndRecreateRelationsTable() throws SQLException 
	{
		PreparedStatement stmt = DatabaseGateway.getConnection().prepareStatement("DROP TABLE PowerToolsTOStripNails");
		stmt.execute();
		stmt = DatabaseGateway.getConnection().prepareStatement("CREATE TABLE PowerToolsTOStripNails("
				+ "id INT(9) PRIMARY KEY AUTO_INCREMENT,"
				+ "PowerToolid INT(9) NOT NULL,"
				+ "FOREIGN KEY(PowerToolid) REFERENCES PowerTool(id), "
				+ "StripNailid INT(9) NOT NULL,"
				+ "FOREIGN KEY(StripNailid) REFERENCES StripNail(id));");
		stmt.execute();
	}
	
	/**
	 * Return all rows from a table in a ResultSet 
	 * @param TableName - name of table to access
	 * @return rs - all values within a table
	 * @throws SQLException
	 */
	public static ResultSet getTable(String TableName) throws SQLException
	{
		Connection DBConnection = getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		st = DBConnection.prepareStatement("SELECT * FROM " + TableName);
		rs = st.executeQuery();
		return rs;
	}
	
	/**
	 * Insert a new row into the "KeyTable" and return the id that is generated by the database
	 * @return newID - new id generated by the Keytable
	 * @throws SQLException 
	 */
	public static int getNewID() throws SQLException
	{
		int newID = -1;		
		Connection DBConnection = getConnection();
		String insertIntoKeyTable = "INSERT INTO KeyTable (InUse) VALUES (" + 1 + ")";
		PreparedStatement st;
		st = DBConnection.prepareStatement(insertIntoKeyTable, Statement.RETURN_GENERATED_KEYS);
		st.execute();
		ResultSet rs = st.getGeneratedKeys();
		if(rs.next())
		{
			newID = rs.getInt(1);
		}
		return newID;
	}
	
	/**
	 * Query a table for an id and return the ResultSet
	 * @param TableName - name of table to look in
	 * @param ID - id to look in database for
	 * @return rs - result set of the object with the id in the table
	 * @throws SQLException
	 */
	public static ResultSet getObjectByID(String TableName,int ID) throws SQLException
	{
		Connection DBConnection = getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		st = DBConnection.prepareStatement("SELECT * FROM " + TableName + " WHERE id = " + ID + ";");
		rs = st.executeQuery();
		return rs;
	}	
	
	/**
	 * Adds an inventory item to the database
	 * @param insertStatement - insert statement for adding the 
	 * new inventory item
	 * @throws SQLException
	 */
	public static void createRow(String insertStatement) throws SQLException
	{
		Connection DBConnection = getConnection();
		PreparedStatement st = null;
		st = DBConnection.prepareStatement(insertStatement);
		st.execute();			
	}
	
	/**
	 * Insert a row into the 'PowerToolsToStripNails' table to relate a PowerTool and a StripNail
	 * @param PowerToolID - id of power tool
	 * @param StripNailID - id of strip nail
	 * @throws SQLException
	 */
	public static void createRowRelation(int PowerToolID, int StripNailID) throws SQLException
	{
		String insertStatement = "INSERT INTO PowerToolsTOStripNails (PowerToolid, StripNailid) VALUES (" + 
				PowerToolID + "," + StripNailID + ")";
		Connection DBConnection = getConnection();
		PreparedStatement st = null;
		st = DBConnection.prepareStatement(insertStatement);
		st.execute();			
	}
	
	/**
	 * Returns StripNail IDs related to the PowerTool ID
	 * @param powerToolID - id of power tool to find all strip nails for.
	 * @return stripNailsForPowerTools - all the strip nails for a certain power tool.
	 * @throws SQLException
	 */
	public static ArrayList<Integer> readRowRelationPowerTool(int powerToolID) throws SQLException
	{
		Connection DBConnection = getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		st = DBConnection.prepareStatement("SELECT * FROM PowerToolsTOStripNails WHERE PowerToolid = " + powerToolID + ";");
		rs = st.executeQuery();
		
		ArrayList<Integer> stripNailsForPowerTool = new ArrayList<Integer>();
		while(rs.next())
		{
				stripNailsForPowerTool.add(rs.getInt("StripNailid"));
		}
		return stripNailsForPowerTool ;
		
	}
	/**
	 * Returns PowerTool IDs related to the StripNail ID
	 * @param stripNailID - id of strip nails to find all power tools for
	 * @return powerToolsForStripNails - all the power tools associated to a strip nail
	 * @throws SQLException
	 */
	public static ArrayList<Integer> readRowRelationStripNail(int stripNailID) throws SQLException
	{
		Connection DBConnection = getConnection();
		PreparedStatement st = null;
		ResultSet rs = null;
		st = DBConnection.prepareStatement("SELECT * FROM PowerToolsTOStripNails WHERE StripNailid = " + stripNailID + ";");
		rs = st.executeQuery();
		ArrayList<Integer> powerToolsForStripNails = new ArrayList<Integer>();
		while(rs.next())
		{
				powerToolsForStripNails.add(rs.getInt("PowerToolid"));
		}
		return powerToolsForStripNails;		
	}
	
	/**
	 * Queries the 'KeyTable' table to get all the Inventory Item IDs
	 * @return allKeys - all the keys generated by the KeyTable
	 * @throws SQLException
	 */
	public static ArrayList<Integer> getAllKeysFromKeyTable() throws SQLException
	{
		ResultSet result = getTable("KeyTable");
		ArrayList<Integer> allKeys = new ArrayList<Integer>();
		while(result.next())
		{
			allKeys.add(result.getInt("Key"));
		}
		return allKeys;
	}
	
	/**
	 * Creates the database
	 * @throws SQLException
	 */
	public static void createDatabase() throws SQLException
	{
		Connection DBConnection = getConnection();
		Statement st = null;
		st = DBConnection.createStatement();
		
		/**
		 * Drop all of the tables
		 */
		for(String statement : CreationString.dropTables)
		{
			st.executeUpdate(statement);
		}
		
		/**
		 * Create all of the tables
		 */
		for(String statement : CreationString.createTables)
		{
			st.executeUpdate(statement);
		}
	}
}